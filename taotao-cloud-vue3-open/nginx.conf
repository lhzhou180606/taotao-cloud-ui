user root;
worker_processes  auto;

#error_log  /var/log/nginx/error.log error;
#pid    /var/run/nginx.pid;

env GATEWAY_URL;

events {
    use epoll;
    worker_connections  65535;
    multi_accept off;
}

http {
    # dns解析器的地址
    # docker 的地址为 127.0.0.11
    # k8s 的地址为  kubectl get svc -A |grep kube-dns 出来的IP地址，例如：10.96.0.10
    # resolver 127.0.0.11 ipv6=off;

    include       mime.types;
    default_type  application/octet-stream;

    # 自定义日志格式，打印出 请求和 响应的时间，单位：秒。
    # upstream_response_time - request_time = nginx自身消耗的时间
    # log_format 和 access_log 必须全部开启，不然 不生效
    # 日志路径：/usr/local/openresty/nginx/logs
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_x_forwarded_for" $request_time $upstream_response_time';

    #log_format log_json '{"@timestamp": "$time_local", '
    #                       '"remote_addr": "$remote_addr", '
    #                       '"referer": "$http_referer", '
    #                       '"request": "$request", '
    #                       '"status": $status, '
    #                       '"bytes": $body_bytes_sent, '
    #                       '"agent": "$http_user_agent", '
    #                       '"upstream_addr": "$upstream_addr",'
    #                       '"upstream_status": "$upstream_status",'
    #                       '"up_resp_time": "$upstream_response_time",'
    #                       '"request_time": "$request_time"'
    #                       ' }';

    access_log  logs/access.log  main;

    server_tokens off;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout  65;
    underscores_in_headers on;

    #用于tomcat反向代理,解决nginx 504错误（全局配置） 单位秒
    proxy_connect_timeout 300;
    proxy_send_timeout 300;
    proxy_read_timeout 300;

    proxy_set_header Host $host:$server_port;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Real-PORT $remote_port;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    server {
          listen 44444;
          listen [::]:44444;

          # listen 443 ssl;
          #server_name open.taotaocloud.top;

          #ssl_certificate /opt/openresty/cert/scs1640230700475_open.taotaocloud.top_server.crt;
          #ssl_certificate_key /opt/openresty/cert/scs1640230700475_open.taotaocloud.top_server.key;
          #ssl_session_timeout 5m;
          #ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
          #ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;
          #ssl_prefer_server_ciphers on;

          # 开启gzip
          gzip  on;
          # 对于静态文件的处理模块 开启后会寻找.gz结尾的文件 直接返回不会占用cpu进行压缩 如果找不到则不压缩
          gzip_static on;
          # 设置压缩的缓冲区大小 以8k为单位 如果文件为15k 则申请 16*8k 的缓冲区
          gzip_buffers 16 8k;
          # 压缩起点 大于1k才进行压缩
          gzip_min_length 1k;
          # 压缩级别 1-9 越大越好 也越占用cpu时间
          gzip_comp_level 8;
          # 如果nginx中使用了多层代理 必须设置这个才可以开启gzip 设置gizp针对的http协议版本
          gzip_http_version 1.1;
          # 进行压缩文件的类型
          gzip_types application/javascript text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;
          # 不使用gzip IE6
          gzip_disable "MSIE [1-6]\.";
          gzip_proxied any;
          # 是否在http header中添加Vary: Accept-Encoding，建议开启
          gzip_vary on;

          location / {
              # 不缓存html，防止程序更新后缓存继续生效
              if ($request_filename ~* .*\.(?:htm|html)$) {
                add_header Cache-Control "private, no-store, no-cache, must-revalidate, proxy-revalidate";
              }

              root  /usr/share/nginx/html;
              index index.html index.htm;

    	        expires off;
    	        etag off;
    	        if_modified_since off;

        	    set $fallback_file /index.html;
              if ($http_accept !~ text/html) {
                  set $fallback_file /null;
              }
              if ($uri ~ /$) {
                  set $fallback_file $uri;
              }
              try_files $uri $fallback_file;
          }
      }
}
